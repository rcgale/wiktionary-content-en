In [[computing]], a [[shebang]] is a special line that begins an executable [[text file]] (commonly called a [[script (computer programming)|script]]) causing [[Unix-like]] [[operating system]]s to execute the commands in the text file using a specific [[interpreter (computer software)|interpreter]] ([[computer program|program]]).

A shebang consists of a [[number sign]] and an [[exclamation point]] character (so "#!") in the first two columns of the first line, followed by the [[Path (computing)|path]] to the interpreter program that will provide the interpretation. The name ''shebang'' comes from an inexact [[contraction (linguistics)|contraction]] of ''sharp bang'' or ''haSH bang'', referring to the two typical Unix names of the two characters. (Unix jargon uses ''sharp'' or ''hash'' to refer to the number sign character and ''bang'' to refer to the exclamation point, hence ''shebang''.) Because the "#" character is used as the comment marker in these executable text files, the actual contents of the shebang line will be ignored by the interpreter; the shebang line only exists to specify the correct interpreter to be used.

The shebang is actually a human-readable instance of a [[Magic number (programming)#Magic numbers in files|magic number]] in the executable file (with shebang equalling the magic number 0x2321). Executable files that do not require an interpreter program start with other magic combinations. (See [[File format]] for more details of magic numbers.)

Some typical shebang lines:
* <code>#!/bin/sh</code> -- Execute using <code>sh</code> program in the <code>/bin/</code> directory, the [[Bourne shell]]
* <code>#!/bin/csh</code> -- Execute using <code>csh</code>, the [[C shell]] instead
* <code>#!/bin/perl</code> -- Execute using [[Perl]]

Shebang lines can also include specific options that will be passed to the interpreter; see the examples below.  However, implementations differ widely on how options are parsed.

It is common for different variants of even the same operating system to have different locations for the desired interpreter. In the absence of a rigidly standardised filesystem structure among different Unix systems, this method can also limit the portability of the file. Thus, it is not uncommon to need to edit the shebang line after copying a [[script (computer programming)|script]] from one computer to another because the path that was coded into the script may not apply on a new machine.  For this and other reasons, [[POSIX]] does not standardize the feature.

== Example shebang lines ==
This file is a [[bash]] script, the [[Unix]] equivalent of a [[DOS]] [[batch file]]:

 #!/bin/bash
 #
 # The rest of the bash script
 ...


This file is a [[Perl]] script, to be run with 'warnings' enabled (-w):

 #!/usr/bin/perl -w
 #
 # The rest of the Perl script
 ...


This file is also a Perl script but it assumes that the Perl interpreter is in a different place.
Also, the Perl interpreter is run without extra warnings being enabled.

 #!/usr/local/bin/perl
 #
 # The rest of the Perl script
 ...

Sometimes, the exact path to the required interpreter is not known, so the env program can be used instead to search for it.

 #!/usr/bin/env python
 #
 # The rest of the Python script
 ...

==External links==
*[http://homepages.cwi.nl/~aeb/std/shebang/ Details about the shebang mechanism on various Unix flavours]
*[[FOLDOC:shebang|FOLDOC shebang article]]

[[de:Shebang]]
[[fr:Sha-bang]]
[[pl:Shebang]]