{{cleanup}}
A problem that can be formally stated and for which a solution is known to exist but which has not yet been solved.

It is common in graduate schools for faculty members to point out open problems to students in the hopes that perhaps the student can solve such problems.

Examples of "formerly open problems" closed since 1975 include "a proof of fermat's last theorem" and "a proof that four colors suffice to color any planar map."

One of the most important open problems in the field of theoretical computer science is "Prove or disprove that no problem in the class of NP-Complete problems can be solved in polynomial time by a deterministic Turing machine."  Stated succinctly, show that P != NP.

A major open problem in computer scheduling is "Give an optimal polynomial-time algorithm for 3 processor scheduling of unit-length jobs with task dependencies, or show that the problem is NP-Complete."  This problem has practical importance in scheduling the pipelines of a superscalar processor instructions.  In fact, if P != NP then problems in the computation complexity class (NP-complete - P) are known to exist, and this problem is thought to be a candidate for this complexity class.

Another major open problem in real-time computer scheduling is "Give an optimal heuristic for scheduling periodic real-time task systems when the deadlines are all a constant multiple C (C >= 1) of the period, or prove that the problem is NP-complete (thought to be intractible.)"  A solution to this problem will allow us trade off latency for increased device utilization in most types of real-time systems.